import pool from '../config/db.js';

const createTables = async () => {
  const client = await pool.connect();

  try {
    console.log('üõ† –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã...');

    // 1. –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–±–æ—Ç–µ —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏
    await client.query(`
      CREATE TABLE IF NOT EXISTS jobs (
        id SERIAL PRIMARY KEY,
        user_id INT REFERENCES users(id) ON DELETE CASCADE,
        position TEXT NOT NULL,
        company TEXT NOT NULL,
        salary DECIMAL(10, 2) NOT NULL,
        start_date DATE NOT NULL
      );
    `);

    // 2. –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤
    await client.query(`
      CREATE TABLE IF NOT EXISTS categories (
        id SERIAL PRIMARY KEY,
        name TEXT UNIQUE NOT NULL
      );
    `);

    // 3. –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥
    await client.query(`
      CREATE TABLE IF NOT EXISTS products (
        id SERIAL PRIMARY KEY,
        name TEXT NOT NULL,
        category_id INT REFERENCES categories(id) ON DELETE CASCADE,
        price DECIMAL(10, 2) NOT NULL
      );
    `);

    // 4. –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (—Ä–∞—Å—Ö–æ–¥–æ–≤)
    await client.query(`
      CREATE TABLE IF NOT EXISTS transactions (
        id SERIAL PRIMARY KEY,
        user_id INT REFERENCES users(id) ON DELETE CASCADE,
        product_id INT REFERENCES products(id) ON DELETE CASCADE,
        quantity INT NOT NULL,
        purchase_date DATE NOT NULL DEFAULT CURRENT_DATE
      );
    `);

    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü:', err);
  } finally {
    client.release();
  }
};

createTables();