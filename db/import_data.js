import fs from 'fs';
import csvParser from 'csv-parser';
import pool from '../config/db.js';

const importData = async () => {
  const client = await pool.connect();

  try {
    console.log('üì• –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...');

    // 1. –ò–º–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = [];
    await new Promise((resolve, reject) => {
      fs.createReadStream('import/family_members.csv')
        .pipe(csvParser())
        .on('data', (row) => {
          users.push([row['–§–ò–û'], row['–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è']]);
        })
        .on('end', async () => {
          try {
            const query = `
              INSERT INTO users (full_name, birth_date) 
              VALUES ($1, $2) 
              ON CONFLICT (full_name) DO NOTHING;
            `;
            for (const user of users) {
              await client.query(query, user);
            }
            console.log('‚úÖ –ò–º–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω.');
            resolve();
          } catch (err) {
            reject(err);
          }
        });
    });

    // 2. –ò–º–ø–æ—Ä—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–±–æ—Ç–µ
    const jobs = [];
    await new Promise((resolve, reject) => {
      fs.createReadStream('import/family_members_job.csv')
        .pipe(csvParser())
        .on('data', (row) => {
          jobs.push([row['–§–ò–û'], row['–¢–µ–∫—É—â–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å'], row['–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è'], row['–û–∫–ª–∞–¥'], row['–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞']]);
        })
        .on('end', async () => {
          try {
            const query = `
              INSERT INTO jobs (user_id, position, organization, salary, start_date) 
              VALUES (
                (SELECT id FROM users WHERE LOWER(TRIM(full_name)) = LOWER(TRIM($1))),
                $2, $3, $4, $5
              )
              ON CONFLICT (user_id) DO NOTHING;
            `;
            for (const job of jobs) {
              await client.query(query, job);
            }
            console.log('‚úÖ –ò–º–ø–æ—Ä—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–±–æ—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω.');
            resolve();
          } catch (err) {
            reject(err);
          }
        });
    });

    // 3. –ò–º–ø–æ—Ä—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    const products = [];
    await new Promise((resolve, reject) => {
      fs.createReadStream('import/product.csv')
        .pipe(csvParser())
        .on('data', (row) => {
          products.push([row['–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏'], row['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'], row['–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É']]);
        })
        .on('end', async () => {
          try {
            const query = `
              INSERT INTO products (name, category_id, price) 
              VALUES ($1, (SELECT id FROM categories WHERE name = $2), $3)
              ON CONFLICT (name) DO NOTHING;
            `;
            for (const product of products) {
              await client.query(query, product);
            }
            console.log('‚úÖ –ò–º–ø–æ—Ä—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω.');
            resolve();
          } catch (err) {
            reject(err);
          }
        });
    });

    // 4. –ò–º–ø–æ—Ä—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const transactions = [];
    await new Promise((resolve, reject) => {
      fs.createReadStream('import/expence_product.csv')
        .pipe(csvParser())
        .on('data', (row) => {
          transactions.push([row['–§–ò–û'], row['–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏'], row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'], row['–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏']]);
        })
        .on('end', async () => {
          try {
            const query = `
              INSERT INTO transactions (user_id, product_id, quantity, purchase_date)
              VALUES (
                (SELECT id FROM users WHERE LOWER(TRIM(full_name)) = LOWER(TRIM($1))),
                (SELECT id FROM products WHERE LOWER(TRIM(name)) = LOWER(TRIM($2))),
                $3, $4
              )
              ON CONFLICT (user_id, product_id, purchase_date) 
              DO UPDATE SET quantity = EXCLUDED.quantity;
            `;
            for (const transaction of transactions) {
              await client.query(query, transaction);
            }
            console.log('‚úÖ –ò–º–ø–æ—Ä—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω.');
            resolve();
          } catch (err) {
            reject(err);
          }
        });
    });

    console.log('‚úÖ –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω.');

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö:', err);
  } finally {
    client.release();
  }
};

importData();